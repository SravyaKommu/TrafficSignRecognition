import numpy as np
import cv2
from PIL import Image
import os
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout
images = []
labels = []
for i in range(43):
path = os.path.join(os.getcwd(),'train',str(i))
images_list = os.listdir(path)
for a in images_list:
try:
image = Image.open(path + '\\'+ a)
image = image.resize((30,30))
image = np.array(image)
images.append(image)
labels.append(i)
except:
print("Error loading image")
images = np.array(images)
labels = np.array(labels)
image_train, image_test, label_train, label_test = train_test_split(images, labels,
test_size=0.33,train_size=0.67,random_state=42)
label_train = to_categorical(label_train, 43)
label_test = to_categorical(label_test, 43)
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu',
input_shape=image_train.shape[1:]))
model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(rate=0.5))
model.add(Dense(43, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
epochs = 17
result =model.fit(image_train, label_train, batch_size=64, epochs=epochs,
validation_data=(image_test, label_test))
model.save("model.h5")


import tkinter as tk
from tkinter import filedialog
from tkinter import *
from PIL import ImageTk, Image
import numpy
from keras.models import load_model
model = load_model('model.h5')
classes = { 1:'Speed limit (20km/h)',
2:'Speed limit (30km/h)',
3:'Speed limit (50km/h)',
4:'Speed limit (60km/h)',
5:'Speed limit (70km/h)',
6:'Speed limit (80km/h)',
7:'End of speed limit (80km/h)',
8:'Speed limit (100km/h)',
9:'Speed limit (120km/h)',
10:'No passing',
11:'No passing veh over 3.5 tons',
12:'Right-of-way at intersection',
13:'Priority road',
14:'Yield',
15:'Stop',
16:'No vehicles',
17:'Veh > 3.5 tons prohibited',
18:'No entry',
19:'General caution',
20:'Dangerous curve left',
21:'Dangerous curve right',
22:'Double curve',
23:'Bumpy road',
24:'Slippery road',
25:'Road narrows on the right',
26:'Road work',
27:'Traffic signals',
28:'Pedestrians',
29:'Children crossing',
30:'Bicycles crossing',
31:'Beware of ice/snow',
32:'Wild animals crossing',
33:'End speed + passing limits',
34:'Turn right ahead',
35:'Turn left ahead',
36:'Ahead only',
37:'Go straight or right',
38:'Go straight or left',
39:'Keep right',
40:'Keep left',
41:'Roundabout mandatory',
42:'End of no passing',
43:'End no passing veh > 3.5 tons' }
top=tk.Tk()
top.geometry('800x600')
top.title('Traffic sign Recognition')
label=Label(top, font=('arial',15,'bold'))
sign_image = Label(top)
def classify(file_path):
image = Image.open(file_path)
image = image.resize((30,30))
image = numpy.expand_dims(image, axis=0)
image = numpy.array(image)
pred = model.predict_classes([image])[0]
sign = classes[pred+1]
s="class label : "+str(pred+1)
sig=" traffic sign : "+sign
label.configure(text=s+sig)
def upload_image():
try:
file_path=filedialog.askopenfilename()
uploaded=Image.open(file_path)
im=ImageTk.PhotoImage(uploaded)
sign_image.configure(image=im)
sign_image.image=im
label.configure(text='')
classify(file_path)
except:
pass
upload=Button(top,text="Upload sign",command=upload_image,padx=10,pady=0)
upload.configure(foreground='black',font=('arial',10,'bold'))
upload.pack(side=TOP,pady=5)
sign_image.pack(side=TOP,expand=True)
label.pack(side=TOP,expand=True)
top.mainloop()